import numpy as np
import matplotlib.pyplot as plt
import math
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import matplotlib.colors as colors
#import matplotlib.animation as animation

#環境設
m=50  #tの範囲
n=50  #偶数

p=1/2
q=1-p


#ユニタリー行列
P = [[p, q, math.sqrt(p*q), math.sqrt(p*q)],[0,0,0,0],[0,0,0,0],[0,0,0,0]]
Q = [[0,0,0,0],[p, 1j*q, -math.sqrt(p*q), -1j*math.sqrt(p*q)],[0,0,0,0],[0,0,0,0]]
R = [[0,0,0,0],[0,0,0,0],[math.sqrt(p*q), -math.sqrt(p*q), q, -p],[0,0,0,0]]
S = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[math.sqrt(p*q), -1j*math.sqrt(p*q), -p, 1j*q]]
####
x_list = [i for i in range(1,2*n+1)]
y_list = [i for i in range(1,2*n+1)]
phi_map = np.zeros((2*m+3, 2*m+3,4),dtype="complex") 
phi_map[n,n]= np.array([1,0,0,0])
p_map=np.zeros([2*m+3,2*m+3])
p_map[n,n] = np.real(np.inner(phi_map[n,n], np.conj(phi_map[n,n])))
###
for t in range(0,n+1):
    if t == 0:
        p_map
    else:
        for i in itertools.product(x_list,y_list):
            next_phi_map[i[0],i[1]] = np.array([np.dot(P, phi_map[i[0]-1,i[1]]) + np.dot(Q, phi_map[i[0]+1,i[1]]) + np.dot(R, phi_map[i[0],i[1]+1])
            + np.dot(S, phi_map[i[0],i[1]-1])])
            p_map[i] = np.real(np.inner(next_phi_map[i], np.conj(next_phi_map[i])))
        phi_map = next_phi_map
    print(t, p_map)

#####
fig = plt.figure()
ax = Axes3D(fig, rect=(0.1,0.1,0.8,0.8))
X,Y = np.meshgrid(x_list, y_list)
ax.set_xlabel("x",labelpad=10,fontsize=24)
ax.set_ylabel("y",labelpad=20,fontsize=24)
ax.set_zlabel("$|\psi|^2$",labelpad=10,fontsize=24)
ax.set_xlim(2*m,0)
ax.set_ylim(0,2*m)
ax.set_zlim(0,0.02)
#####
mask= p_map > 0.0
offset = p_map[mask].ravel() + np.abs(p_map[mask].min())
fracs = offset.astype(float)/offset.max()
norm = colors.Normalize(fracs.min(), fracs.max())
clrs = cm.cool(norm(fracs))
#####
ax.bar3d(X[mask].ravel(), Y[mask].ravel(), p_map[mask].ravel() ,0.3, 0.3, -p_map[mask].ravel(),color =clrs)
ax.w_xaxis.set_pane_color((0, 0, 0, 0))
ax.w_yaxis.set_pane_color((0, 0, 0, 0))
ax.w_zaxis.set_pane_color((0, 0, 0, 1))
ax.grid(color="white")
ax.grid(False)
plt.show()

