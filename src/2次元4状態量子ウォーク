import numpy as np
import matplotlib.pyplot as plt
import math
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
import matplotlib.colors as colors
import itertools

n = 3
itr = 10

x_list=[i for i in range(0,2*n+1)]
y_list=[i for i in range(0,2*n+1)]
t_list=[i for i in range(0,itr+1)]
p_list=[]
#####
P = [[-1/2, 1/2, 1/2, 1/2],[0,0,0,0],[0,0,0,0],[0,0,0,0]] #→
Q = [[0,0,0,0],[1/2, -1/2, 1/2, 1/2],[0,0,0,0],[0,0,0,0]] #←
R = [[0,0,0,0],[0,0,0,0],[1/2, 1/2, -1/2, 1/2],[0,0,0,0]] #↓
S = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[1/2, 1/2, 1/2, -1/2]] #↑
####
phi_map = np.zeros((2*n+1, 2*n+1,4),dtype="complex")
phi_map[0,0]= np.array([1,0,0,0])
next_phi_map = np.zeros((2*n+1, 2*n+1,4),dtype="complex")
p_map=np.zeros([2*n+1,2*n+1])
p_map[0,0] = 1.0
################
for t in range(0,itr+1):
    if t == 0:
        p_map
        phi_map
    else:
        for i in itertools.product(x_list,y_list):
            x = i[0]
            y = i[1]

            x1 = (x-1 + 2*n+1) % (2*n+1)
            x2 = (x+1) % (2*n+1)
            y1 = (y-1 + 2*n+1) % (2*n+1)
            y2 = (y+1) % (2*n+1)

            next_phi_map[i] = np.array([np.dot(P, phi_map[x1,y]) + np.dot(Q, phi_map[x2,y])
            + np.dot(R, phi_map[x,y2])+ np.dot(S, phi_map[x,y1])])

            p_map[i] = np.real(np.inner(next_phi_map[i], np.conj(next_phi_map[i])))
        phi_map = np.copy(next_phi_map)
    print(t,np.real(p_map),p_map.sum())
########
#plt.xlabel("t",fontsize="24")
#plt.ylabel("probability",fontsize="24")
#plt.plot(t_list,p_list,color="red",label="quantum walk",linewidth="1")
#plt.legend(title="x=26,y=26",loc="best",fontsize=10)
#plt.tight_layout()
#plt.show()
#################################
fig = plt.figure()
ax = Axes3D(fig, rect=(0.1,0.1,0.8,0.8))
X,Y = np.meshgrid(x_list, y_list)
ax.set_xlabel("x",labelpad=10,fontsize=24)
ax.set_ylabel("y",labelpad=20,fontsize=24)
ax.set_zlabel("$|\psi|^2$",labelpad=10,fontsize=24)
#ax.set_ylabel("t")
ax.set_xlim(2*n,0)
ax.set_ylim(0,2*n)
ax.set_zlim(0,1)
##############################
mask= p_map > 0.0
offset = p_map[mask].ravel() + np.abs(p_map[mask].min())
fracs = offset.astype(float)/offset.max()
norm = colors.Normalize(fracs.min(), fracs.max())
clrs = cm.cool(norm(fracs))
ax.bar3d(X[mask].ravel(), Y[mask].ravel(), p_map[mask].ravel() ,0.3, 0.3, -p_map[mask].ravel(),color =clrs)
ax.w_xaxis.set_pane_color((0, 0, 0, 0))
ax.w_yaxis.set_pane_color((0, 0, 0, 0))
ax.w_zaxis.set_pane_color((0, 0, 0, 1))
ax.grid(color="white")
ax.grid(False)
#plt.show()
